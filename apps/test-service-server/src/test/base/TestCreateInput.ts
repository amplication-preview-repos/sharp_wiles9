/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { EnumTestTags } from "./EnumTestTags";
import { EnumTestDifficultyLevel } from "./EnumTestDifficultyLevel";
import { QuestionCreateNestedManyWithoutTestsInput } from "./QuestionCreateNestedManyWithoutTestsInput";
import { Type } from "class-transformer";
import { ResultCreateNestedManyWithoutTestsInput } from "./ResultCreateNestedManyWithoutTestsInput";

@InputType()
class TestCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  image?: InputJsonValue;

  @ApiProperty({
    required: false,
    enum: EnumTestTags,
    isArray: true,
  })
  @IsEnum(EnumTestTags, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumTestTags], {
    nullable: true,
  })
  tags?: Array<"Option1">;

  @ApiProperty({
    required: false,
    enum: EnumTestDifficultyLevel,
  })
  @IsEnum(EnumTestDifficultyLevel)
  @IsOptional()
  @Field(() => EnumTestDifficultyLevel, {
    nullable: true,
  })
  difficultyLevel?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => QuestionCreateNestedManyWithoutTestsInput,
  })
  @ValidateNested()
  @Type(() => QuestionCreateNestedManyWithoutTestsInput)
  @IsOptional()
  @Field(() => QuestionCreateNestedManyWithoutTestsInput, {
    nullable: true,
  })
  questions?: QuestionCreateNestedManyWithoutTestsInput;

  @ApiProperty({
    required: false,
    type: () => ResultCreateNestedManyWithoutTestsInput,
  })
  @ValidateNested()
  @Type(() => ResultCreateNestedManyWithoutTestsInput)
  @IsOptional()
  @Field(() => ResultCreateNestedManyWithoutTestsInput, {
    nullable: true,
  })
  results?: ResultCreateNestedManyWithoutTestsInput;
}

export { TestCreateInput as TestCreateInput };
