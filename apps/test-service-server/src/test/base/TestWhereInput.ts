/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { JsonFilter } from "../../util/JsonFilter";
import { EnumTestDifficultyLevel } from "./EnumTestDifficultyLevel";
import { QuestionListRelationFilter } from "../../question/base/QuestionListRelationFilter";
import { ResultListRelationFilter } from "../../result/base/ResultListRelationFilter";

@InputType()
class TestWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: JsonFilter,
  })
  @Type(() => JsonFilter)
  @IsOptional()
  @Field(() => JsonFilter, {
    nullable: true,
  })
  image?: JsonFilter;

  @ApiProperty({
    required: false,
    enum: EnumTestDifficultyLevel,
  })
  @IsEnum(EnumTestDifficultyLevel)
  @IsOptional()
  @Field(() => EnumTestDifficultyLevel, {
    nullable: true,
  })
  difficultyLevel?: "Option1";

  @ApiProperty({
    required: false,
    type: () => QuestionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => QuestionListRelationFilter)
  @IsOptional()
  @Field(() => QuestionListRelationFilter, {
    nullable: true,
  })
  questions?: QuestionListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ResultListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ResultListRelationFilter)
  @IsOptional()
  @Field(() => ResultListRelationFilter, {
    nullable: true,
  })
  results?: ResultListRelationFilter;
}

export { TestWhereInput as TestWhereInput };
